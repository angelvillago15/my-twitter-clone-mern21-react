{"version":3,"sources":["config.js","utils/api.js","utils/utils.js","components/post/PostList.jsx","utils/apicalls.js","images/bird_fake_twitter.png","components/App.jsx","components/HeaderDashBoard.jsx","components/post/AddPost.jsx","components/post/EditPost.jsx","components/post/MyPostList.jsx","reportWebVitals.js","index.js","components/Home.jsx"],"names":["config","baseURL_API","process","REACT_API_APIURI","clientID","console","log","axios","create","baseURL","monthNames","dayNames","getDateInStrFormat","date","getDay","getDate","getMonth","getFullYear","getHours","slice","getMinutes","getSeconds","PostList","useState","posts","setPosts","getPosts","API","get","then","res","data","useEffect","CardTitle","tag","Alert","color","Badge","pill","length","Table","map","post","index","Row","Col","Card","CardBody","src","image","alt","user","message","align","xs","Math","floor","random","Date","publicationdate","imgStyle","maxWidth","HeaderDashboard","props","Navbar","light","expand","NavbarBrand","className","sessionStorage","getItem","Collapse","navbar","Nav","NavItem","NavLink","href","onClick","onShow","clientId","buttonText","theme","onLogoutSuccess","onLogout","AddPost","setMessage","checkPOSTNewPost","updateMyPosts","body","Form","FormGroup","Label","for","Input","style","height","type","name","value","id","placeholder","onChange","e","target","Button","preventDefault","email","result","postNewPost","EditPost","checkPUTPost","idpost","put","putExistingPost","_id","MyPostList","edit","setEdit","activeTab","setActiveTab","showDeleteModal","setShowDeleteModal","toggleTab","tab","handleUpdateMyPosts","deletePostSel","delete","checkDELETEPost","outline","handleShowEdit","Modal","isOpen","ModalHeader","ModalBody","ModalFooter","askForDelete","tabs","classnames","active","TabContent","TabPane","tabId","sm","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","exact","path","component","loginMessage","setLoginMessage","Container","Media","object","MyPlaceBird","onSuccess","googleUser","profile","getBasicProfile","setItem","getName","getEmail","getImageUrl","history","push","onFailure","response","show","setShow","clear","option","document","getElementById"],"mappings":"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","file":"static/js/main.5a5c5854.chunk.js","sourcesContent":["const config = {\n    baseURL_API: process.env.REACT_API_APIURI || \"https://mytwitterclone21.herokuapp.com/\",\n    clientID: process.env.REACT_APP_CLIENTID\n}\n\nconsole.log(\"HOLA GONZALO\")\nconsole.log(config)\nexport default config;","import axios from 'axios';\nimport config from '../config.js';\n\nexport default axios.create({\n  baseURL: config.baseURL_API\n  //baseURL: 'http://localhost:3000'  //con proxy en package.json, \"proxy\": \"https://localhost:3000/\"\n});","export {\n    getDateInStrFormat\n  };\n  \n  /* Formatting date */\n  const monthNames = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\",\n  \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\n  const dayNames = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\",\"Fri\", \"Sat\"];\n  \n  function getDateInStrFormat(date){\n    var strformatted = dayNames[date.getDay()]+\", \"+\n                       date.getDate()+\" \"+\n                       monthNames[date.getMonth()]+\" \"+\n                       date.getFullYear()+\", \"+\n                       (\"0\" + date.getHours()).slice(-2)+\":\"+\n                       (\"0\" + date.getMinutes()).slice(-2)+\":\"+\n                       (\"0\" + date.getSeconds()).slice(-2);\n    return strformatted;\n  }","import React, { useState, useEffect } from 'react';\nimport { Row, Col, Card, CardTitle, Badge, CardBody, Table, Alert } from 'reactstrap';\nimport '../../styles.css';\n\nimport { AiOutlineHeart, AiOutlineRetweet } from 'react-icons/ai';\nimport { BsChat, BsUpload } from \"react-icons/bs\";\n\nimport { getAllPosts } from \"../../utils/apicalls.js\";\nimport { getDateInStrFormat } from \"../../utils/utils.js\";\n\nexport default function PostList(){\n\n  const [posts, setPosts] = useState([]);\n\n  const getPosts = () => {\n    getAllPosts().then((posts) => {\n      setPosts(posts);\n    });\n  }\n\n  useEffect(() =>{\n    getPosts();\n  },[]);\n\n  return (\n    <div>\n      <CardTitle tag=\"center\"><Alert color=\"primary\"><strong>Posts publicados </strong><Badge pill>{posts.length}</Badge></Alert></CardTitle>\n      <Table>\n        <tbody>\n          { posts.map((post, index) => {\n            return(\n              <div>\n                  <Row>\n                    <Col>\n                      <Card>\n                        <CardBody>\n                          <Row><Col><strong><img src={post.image} alt=\"Img\"/> {post.user}</strong></Col></Row>\n                          <Row>\n                            <Col>\n                              {post.message}\n                            </Col>\n                          </Row>\n                          <Row>\n                            <Col align=\"left\" xs= \"5\">\n                              <Row>\n                                <Col xs=\"2\"><BsChat /></Col>\n                                <Col xs=\"2\"><AiOutlineRetweet /><small>{Math.floor((Math.random() * 10) + 1)}</small></Col>\n                                <Col xs=\"2\"><AiOutlineHeart /><small>{Math.floor((Math.random() * 100) + 1)}</small></Col>\n                                <Col xs=\"2\"><BsUpload/></Col>\n                              </Row>\n                            </Col>\n                            <Col align=\"right\">  \n                              <small>{getDateInStrFormat(new Date(post.publicationdate))}</small>\n                            </Col>\n                          </Row>\n                        </CardBody>\n                      </Card>\n                    </Col>\n                  </Row>\n                  <br/>\n              </div>)\n            })}\n          </tbody>\n        </Table>\n      </div>\n    );\n}","import API from './api';\n\nfunction getAllPosts() {\n    return API.get('/posts').then(res => res.data);\n  }\n\n  function getMyPosts(email) {\n    return API.get('/posts/all/'+email).then(res => res.data);\n  }\n\n  function deletePost(idpost) {\n    return API.delete('/posts/'+idpost).then(result => result.data);\n  }\n  \n\n  function postNewPost(email, user, image, message) {\n    return API.post('/posts', {\n      email,\n      user,\n      image,\n      message}).then(result => result.data);\n  }\n\n  function putExistingPost(idpost, message) {\n    return API.put('/posts/'+idpost, {\n      message}).then(result => result.data);\n  }\n\n  export {\n    getAllPosts, \n    getMyPosts,\n    deletePost,\n    postNewPost,\n    putExistingPost\n}\n\n","export default __webpack_public_path__ + \"static/media/bird_fake_twitter.7a65b904.png\";","import React, { useState } from 'react';\nimport { Navbar, NavbarBrand, Nav, NavItem, Media, Row, Col, Container, Alert } from 'reactstrap'; //componentes de reactstrap\nimport PostList from './post/PostList'; //postlist muestra la lista de post xdd obvio\nimport { GoogleLogin } from 'react-google-login'; //autenticacion de google\nimport config from '../config.js';\nimport MyPlaceBird from '../images/bird_fake_twitter.png';\nvar imgStyle = {\n  maxWidth: \"85px\",\n};\n\nexport default function App(props){\n\n  const [loginMessage, setLoginMessage] = useState(null); //estado y variables de estado\n  const responseGoogleSuccess = (googleUser) => {\n    var profile = googleUser.getBasicProfile();\n    sessionStorage.setItem('name', profile.getName()); //creas una sesion mientras que esta logeado\n    sessionStorage.setItem('email', profile.getEmail());\n    sessionStorage.setItem('image', profile.getImageUrl());\n    \n    props.history.push(\"/home\");\n  }\n\n  const responseGoogleFailure = (response) => {\n    setLoginMessage(<Alert color=\"danger\">Inicio de sesión incorrecto. Inténtelo de nuevo</Alert>);\n  }\n\n  return(\n    <Container>\n      <Row>\n        <Col>\n          <Navbar color=\"primary\" light expand=\"md\">\n          <Media style={imgStyle} object src={MyPlaceBird} alt=\"Bird\"/><NavbarBrand><h4 className=\"text-white\">My Twitter Clone</h4></NavbarBrand>\n            <Nav className=\"ml-auto\" navbar>\n              <NavItem>\n                {loginMessage}\n                <GoogleLogin\n                  clientId={config.clientID}\n                  buttonText=\"Login with Google\"\n                  theme='dark'\n                  onSuccess={responseGoogleSuccess} //propiedades o atributos asociadas a funciones\n                  onFailure={responseGoogleFailure}\n                />\n              </NavItem>\n            </Nav>\n          </Navbar>\n        </Col>\n      </Row>\n      <Row>\n        <Col xs= \"12\">\n          <PostList/>\n        </Col>\n      </Row>\n    </Container>\n  );\n}","import React from 'react';\nimport { Collapse, Navbar, NavbarBrand, Nav, NavItem, NavLink } from 'reactstrap';\n\nimport { FaCogs } from 'react-icons/fa';\nimport { GoogleLogout } from 'react-google-login';\nimport config from '../config.js';\n\nexport default function HeaderDashboard(props){\n\n  return (\n    <Navbar color=\"primary\" light expand=\"md\">\n      <NavbarBrand><FaCogs color=\"white\"/><span className=\"text-white\"><strong> Dashboard:</strong> {sessionStorage.getItem('name')}</span></NavbarBrand>\n      <Collapse navbar>\n        <Nav className=\"ml-auto\" navbar>\n          <NavItem>\n            <NavLink href=\"#\" onClick={() => props.onShow(1)}><span className=\"text-white\">Todos los Posts</span></NavLink>\n          </NavItem>\n          <NavItem>\n            <NavLink href=\"#\" onClick={() => props.onShow(2)}><span className=\"text-white\">Mis Posts</span></NavLink>\n          </NavItem>\n          <NavItem>\n            <GoogleLogout\n              clientId={config.clientID}\n              buttonText=\"Logout\"\n              theme='dark'\n              onLogoutSuccess={props.onLogout}\n            />\n          </NavItem>\n        </Nav>\n      </Collapse>\n  </Navbar>\n  );\n}","import React, { useState } from 'react';\nimport { Card, CardTitle, Label, Button, Form, FormGroup, Input } from 'reactstrap';\n\nimport { postNewPost } from \"../../utils/apicalls.js\";\n\nexport default function AddPost(props){\n\n  const [message, setMessage] = useState('');\n\n  const addPost = (e) => {\n    e.preventDefault();\n    //Save post in database with post api call\n    postNewPost(sessionStorage.getItem('email'),sessionStorage.getItem('name'), sessionStorage.getItem('image'), message)\n      .then((res) => checkPOSTNewPost(res));\n  }\n\n  //Check the response from the server\n  const checkPOSTNewPost = (res) => {\n    if (res === \"OK\"){\n      //TODO Show Modal when a new post is added\n      props.updateMyPosts();\n    }else{\n      //TODO Show Modal when an error adding a new post occurs\n    }\n  }\n\n  return (\n    <div>\n      <Card body>\n        <CardTitle tag=\"h5\">Añadir un nuevo post</CardTitle>\n        <Form>\n          <FormGroup>\n            <Label for=\"aMensaje\">Mensaje</Label>\n            <Input style={{height: '200px'}} type=\"textarea\" name=\"message\" value={message} id=\"aMensaje\" placeholder=\"Introduce un mensaje\" onChange={(e) => setMessage(e.target.value)}/>\n          </FormGroup>\n          <Button color=\"primary\" onClick={addPost}>Añadir</Button>\n        </Form>\n      </Card>\n    </div>\n  );\n}","import React, { useState, useEffect } from 'react';\nimport { Card, CardTitle, Label, Button, Form, FormGroup, Input } from 'reactstrap';\n\nimport { putExistingPost } from \"../../utils/apicalls.js\";\n\nexport default function EditPost(props){\n\n  const [message, setMessage] = useState(props.post.message); //el post que le llega del padre\n\n  const editPost = (e) => {\n    e.preventDefault();\n    //Update post in database with put api call\n    putExistingPost(props.post._id, message)\n      .then((res) => checkPUTPost(res));\n  }\n\n  //Check the response from the server\n  const checkPUTPost = (res) => {\n    if (res === \"OK\"){\n      //TODO Show Modal when a the post is updated\n      props.updateMyPosts();\n    }else{\n      //TODO Show Modal when an error updating the post occurs\n    }\n  }\n\n  useEffect(() =>{\n    setMessage(props.post.message);\n  },[props.post]);\n\n  return (\n    <div>\n      <Card body>\n        <CardTitle tag=\"h5\">Editar post</CardTitle>\n        <Form>\n          <FormGroup>\n            <Label for=\"aDescripcion\">Mensaje</Label>\n            <Input style={{height: '200px'}} type=\"textarea\" name=\"message\" id=\"aDescripcion\" placeholder=\"Introduce un mensaje\" value={message} onChange={(e) => setMessage(e.target.value)}/>\n          </FormGroup>\n            <Button color=\"primary\" onClick={editPost}>Actualizar</Button>\n        </Form>\n      </Card>\n    </div>\n  );\n}","import React, { useState, useEffect } from 'react';\nimport classnames from 'classnames';\nimport '../../styles.css';\n\n\nimport { Row, Col, Card, CardTitle, Badge, CardBody,\nTable, Alert, Button, Nav, NavItem, NavLink, TabContent,\nTabPane, Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap';\n\nimport { FaEdit, FaTrashAlt } from 'react-icons/fa';\nimport { AiOutlineHeart, AiOutlineRetweet } from 'react-icons/ai';\nimport { BsChat, BsUpload } from \"react-icons/bs\";\n\nimport { getMyPosts, deletePost } from \"../../utils/apicalls.js\";\nimport { getDateInStrFormat } from \"../../utils/utils.js\";\n\nimport AddPost from './AddPost';\nimport EditPost from './EditPost';\n\nexport default function MyPostList(props){\n\n  const [posts, setPosts] = useState([]);\n  const [edit, setEdit] = useState(<Alert color=\"warning\">Seleccione editar un post de la lista</Alert>);\n  const [activeTab, setActiveTab] = useState('1');\n  const [showDeleteModal, setShowDeleteModal] = useState(null);\n\n  const getPosts = () => {\n      getMyPosts(sessionStorage.getItem('email')).then((posts) => {\n          setPosts(posts);\n      });\n  }\n\n  const toggleTab = (tab) => {\n    if (activeTab !== tab)\n      setActiveTab(tab);\n  }\n\n  const handleUpdateMyPosts = () => {\n    getPosts();\n  }\n\n  const askForDelete = (post) => {\n    setShowDeleteModal(\n      <Modal isOpen=\"true\" className={props.className}>\n        <ModalHeader>Eliminar post</ModalHeader>\n        <ModalBody>\n          Se va a eliminar el post:<br/><small><strong>{post.message}</strong></small> //valores-atriburos del post\n        </ModalBody>\n        <ModalFooter>\n          <Button color=\"primary\" onClick={() => deletePostSel(post)}>Eliminar</Button>{' '}\n          <Button color=\"secondary\" onClick={() => setShowDeleteModal(null)}>Cancelar</Button>\n        </ModalFooter>\n      </Modal>\n    );\n  }\n\n  //Deleting selected post\n  const deletePostSel = (post) => {\n    deletePost(post._id)\n      .then((res) => checkDELETEPost(res));\n  }\n\n  //Check the response from server\n  const checkDELETEPost = (res) => {\n    //if ok, remove modal and reset edit component\n    if (res === \"OK\"){\n      setShowDeleteModal(null);\n      setEdit(<Alert color=\"warning\">Seleccione editar un post de la lista</Alert>);\n      handleUpdateMyPosts();\n    }else{\n      //TODO Show a modal when error from server\n    }\n  }\n\n  const handleShowEdit = (post) => {\n    setEdit(<EditPost post= {post} updateMyPosts = {handleUpdateMyPosts} />);\n  }\n\n  useEffect(() =>{\n    getPosts();\n  },[]);\n\n  return(\n    <div>\n      {showDeleteModal}\n      <Row>\n        <Col xs=\"7\">\n          <CardTitle tag=\"center\"><Alert color=\"primary\"><strong>Mis Posts publicados </strong><Badge pill>{posts.length}</Badge></Alert></CardTitle>\n          <Table>\n            <tbody>\n              { posts.map((post, index) => {\n                return(<div>\n                  <div>\n                  <Row>\n                    <Col>\n                      <Card>\n                        <CardBody>\n                          <Row><Col><strong><img src={post.image} alt=\"Img\"/> {post.user}</strong></Col>\n                               <Col align=\"right\">\n                                  <Button outline onClick={() => handleShowEdit(post)}><FaEdit /></Button>\n                                  {' '}\n                                  <Button outline onClick={() => askForDelete(post)}><FaTrashAlt /></Button>\n                                </Col>\n                                </Row>\n                          <Row>\n                            <Col>\n                              {post.message}\n                            </Col>\n                          </Row>\n                          <Row>\n                            <Col align=\"left\" xs= \"8\">\n                              <Row>\n                                <Col xs=\"2\"><BsChat /></Col>\n                                <Col xs=\"2\"><AiOutlineRetweet /><small>{Math.floor((Math.random() * 10) + 1)}</small></Col>\n                                <Col xs=\"2\"><AiOutlineHeart /><small>{Math.floor((Math.random() * 100) + 1)}</small></Col>\n                                <Col xs=\"2\"><BsUpload/></Col>\n                              </Row>\n                            </Col>\n                            <Col align=\"right\">\n                              <small>{getDateInStrFormat(new Date(post.publicationdate))}</small>\n                            </Col>\n                          </Row>\n                        </CardBody>\n                      </Card>\n                    </Col>\n                  </Row>\n                  <br/>\n              </div>\n                </div>)\n              })}\n            </tbody>\n          </Table>\n        </Col>\n        <Col xs=\"5\">\n          <Nav tabs>\n            <NavItem>\n              <NavLink href=\"#\" className={classnames({ active: activeTab === '1' })} onClick={() => toggleTab('1')}>\n                Añadir\n              </NavLink>\n            </NavItem>\n            <NavItem>\n              <NavLink href=\"#\" className={classnames({ active: activeTab === '2' })} onClick={() => toggleTab('2')}>\n                Editar\n              </NavLink>\n            </NavItem>\n          </Nav>\n          <TabContent activeTab={activeTab}>\n            <TabPane tabId=\"1\">\n              <Row>\n                <Col sm=\"12\">\n                  <AddPost updateMyPosts = {handleUpdateMyPosts}/>\n                </Col>\n              </Row>\n            </TabPane>\n            <TabPane tabId=\"2\">\n              <Row>\n                <Col sm=\"12\">\n                  {edit}\n                </Col>\n              </Row>\n            </TabPane>\n          </TabContent>\n        </Col>\n      </Row>\n    </div>\n  );\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter, Route } from 'react-router-dom';\n\nimport 'bootstrap/dist/css/bootstrap.css';\n\n\nimport App from './components/App';\nimport Home from './components/Home';\nimport './index.css';\n\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(<HashRouter>\n  <div>\n    <Route exact path=\"/\" component={App} />\n    <Route path=\"/home\" component={Home} />\n  </div>\n</HashRouter >, document.getElementById('root'));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import React, { useState } from 'react';\nimport {Container, Row, Col } from 'reactstrap';\n\nimport HeaderDashboard from './HeaderDashBoard';\nimport MyPostList from './post/MyPostList';\nimport PostList from './post/PostList';\n\nexport default function Home(props){\n\n  const [show, setShow] = useState(<PostList />);\n \n  const handleLogout = () => { //te devuelve al principio\n    sessionStorage.clear();\n    props.history.push(\"/\");\n  }\n\n  const handleOnShow = (option) => {\n    if (option === 1){\n      setShow(<PostList />);\n    }else if (option === 2){\n      setShow(<MyPostList />);\n    }\n  }\n\n  if (sessionStorage.getItem(\"name\") === null){\n    props.history.push(\"/\");\n  }\n  else{\n    return (\n      <Container>\n        <Row>\n          <Col><HeaderDashboard onLogout={handleLogout} onShow= {handleOnShow} /></Col> //se ejecuta el logout\n        </Row>\n        <Row>\n          <Col xs=\"12\">\n              {show}\n            </Col>\n        </Row>\n      </Container>\n    );\n  }\n}"],"sourceRoot":""}